<rss version="2.0">
  <channel>
    <title>Tomas Petricek - Languages and tools, open-source, philosophy of science and F# coding</title>
    <link>http://tomasp.net</link>
    <description>Tomas is a computer scienctist, open-source developer and an occasional philosopher of science. I'm working on tools for data-driven storytelling, contribute to a number of F# projects and I run trainings and offer consulting via fsharpWorks.</description>
    <item>
      <title>Programming as interaction: A new perspective for programming language research</title>
      <guid>http://tomasp.net/blog/2018/programming-interaction/</guid>
      <link>http://tomasp.net/blog/2018/programming-interaction/</link>
      <pubDate>Mon, 08 Oct 2018 11:22:57 GMT</pubDate>
      <description>&lt;p&gt;In May, I joined the &lt;a href="https://www.cs.kent.ac.uk/"&gt;School of Computing&lt;/a&gt; at the &lt;a href="https://www.kent.ac.uk/"&gt;University of
Kent&lt;/a&gt; as a Lecturer (equivalent of Assistant Professor in some other countries).
When applying for the job, I spent a lot of time thinking about how to best explain the kind of
research that I would like to do. This blog post is a brief summary of my ideas. I'm interested
in way too many things, including &lt;a href="http://tomasp.net/blog/tag/philosophy/"&gt;philosophy and design&lt;/a&gt; and
&lt;a href="http://tomasp.net/blog/tag/data-journalism/"&gt;data journalism&lt;/a&gt;, but this post will be mainly about
programming language research. After all, I'm a member of the &lt;a href="https://www.cs.kent.ac.uk/research/groups/plas/"&gt;Programming Languages
and Systems group&lt;/a&gt;!&lt;/p&gt;
&lt;img src="http://tomasp.net/blog/2018/programming-interaction/kent.png" class="rdecor-sm" style="max-width:250px"/&gt;
&lt;p&gt;Unlike some of my &lt;a href="http://tomasp.net/blog/2016/thinking-unthinkable/"&gt;other posts about programming languages&lt;/a&gt;,
I won't try to convince you that we should be studying programming languages completely differently this
time. Instead, I want to describe &lt;em&gt;one simple trick that will make current programming language
research much more interesting&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;A lot of programming language papers today talk about programs and program properties. In
statically typed programming languages, we can check that a program &lt;span class="math"&gt;\(e\)&lt;/span&gt; has certain type &lt;span class="math"&gt;\(\tau\)&lt;/span&gt;,
which means that, when the program is run, it will only produce values of the type.
This is very nice, but it misses a fundamental thing about programming. How was this program
&lt;span class="math"&gt;\(e\)&lt;/span&gt; actually constructed?&lt;/p&gt;
&lt;p&gt;When programming, you spend most of your time working with programs that are &lt;em&gt;unfinished&lt;/em&gt;. This
means that they do not do what they are supposed to be (eventually) doing and, very often, they
are not well-typed or even syntactically invalid. However, that does not mean that we can afford
to ignore them. In many cases, programmers can even run those programs (using REPL or using a
notebook environment). In other words, programming language research should not study &lt;em&gt;programs&lt;/em&gt;,
but should instead study &lt;em&gt;programming&lt;/em&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;i class="fa fa-hand-o-right" style="font-size:110%;margin:0px 5px 0px 0px"&gt;&lt;/i&gt;&lt;/em&gt;
I'm also writing this because I'll soon be looking for collaborators and PhD students,
so if the ideas in this blog post sound interesting to you or if you've been working on
something related, please let me know! You can get in touch at &lt;a href="http://twitter.com/tomaspetricek"&gt;@tomaspetricek&lt;/a&gt;
or email &lt;a href="mailto:tomas@tomasp.net"&gt;tomas@tomasp.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll have funding for PhD students from September 2019 and I'm also working on getting money
for a post-doc position. All of these are open ended, so if the blog post made you curious
(and you wouldn't mind living in Canterbury or London), definitely reach out!&lt;/p&gt;
&lt;/blockquote&gt;


</description>
    </item>
    <item>
      <title>Would aliens understand lambda calculus?</title>
      <guid>http://tomasp.net/blog/2018/alien-lambda-calculus/</guid>
      <link>http://tomasp.net/blog/2018/alien-lambda-calculus/</link>
      <pubDate>Tue, 22 May 2018 09:27:00 GMT</pubDate>
      <description>&lt;p&gt;Unless you are a sci-fi author or some secret government agency, the question whether aliens
would understand lambda calculus is probably not your main practical concern. However, the question
is intriguing because it nicely vividly formulates a fundamental question about our formal mathematical
knowledge. Are mathematical theories and results about them &lt;em&gt;invented&lt;/em&gt;, i.e. constructed by
humans, or &lt;em&gt;discovered&lt;/em&gt;, i.e. are they eternal truths that exist regardless of whether there are
humans to know them?&lt;/p&gt;
&lt;img src="http://tomasp.net/blog/2018/alien-lambda-calculus/human.jpg" class="rdecor"
    style="width:40%;max-width:400px;margin-left:30px;margin-top:0px;margin-bottom:0px" /&gt;
&lt;p&gt;The question makes for a fantastic late night pub debate, but how can we go about answering it using
a more serious methodology? Is there a paper one can read to better understand the problem?
Occasionally, a &lt;a href="https://www.youtube.com/watch?list=PLcGKfGEEONaCIl5eU53uPBnRJ9rbIH32R&amp;amp;v=IOiZatlZtGU"&gt;talk&lt;/a&gt;
or an &lt;a href="https://www.quora.com/Do-aliens-have-LISP-or-Scheme"&gt;online comment&lt;/a&gt;
by a computer scientist comments on this question, but way too often, people miss the fact that
the nature of mathematical entities is one of the fundamental questions of &lt;em&gt;philosophy of
mathematics&lt;/em&gt;. Alas, all those discussions are carefully hidden in the humanities department!&lt;/p&gt;
&lt;p&gt;I believe that knowing a bit about philosophy of mathematics is important if we want to have a
meaningful debate about philosophical questions of mathematics (sic!) and so I did a talk
&lt;a href="https://www.youtube.com/watch?v=JoWH2jNlvQQ"&gt;on this very subject at CodeMesh 2017&lt;/a&gt;.
This article is slightly refined and hopefully
more polished version of the talk for those who, like me, prefer reading over watching.
Keep in mind that the question about the nature of mathematical entities is one of the fundamental
questions of an &lt;em&gt;entire academic discipline&lt;/em&gt;. As such, this article cannot possibly cover all the
relevant discussions. Compared to some other writings in this space, this article is, at least,
based on a couple of philosophical books that, I believe, have useful things to say on the subject!&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The design side of programming language design</title>
      <guid>http://tomasp.net/blog/2017/design-side-of-pl/</guid>
      <link>http://tomasp.net/blog/2017/design-side-of-pl/</link>
      <pubDate>Tue, 12 Sep 2017 16:42:38 GMT</pubDate>
      <description>&lt;div style="text-align:center"&gt;
&lt;a href="http://amzn.to/2gVxn8W"&gt;
  &lt;img src="http://tomasp.net/blog/2017/design-side-of-pl/parsons.jpg" class="rdecor"
    style="max-width:220px;margin-left:30px;margin-top:20px;margin-bottom:20px;width:75%" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The word "design" is often used when talking about programming languages. In fact, it even made
it into the name of one of the most prestigious academic programming conferences, &lt;a href="http://www.sigplan.org/Conferences/PLDI/"&gt;Programming
Language Design and Implementation (PLDI)&lt;/a&gt;. Yet, it is
almost impossible to come across a paper about programming languages that uses design methods to
study its subject. We intuitively feel that "design" is an important aspect of programming
languages, but we never found a way to talk about it and instead treat programming languages as
mathematical puzzles or as engineering problems.&lt;/p&gt;
&lt;p&gt;This is a shame. Applying design thinking, in the sense used in applied arts, can let us talk
about, explore and answer important questions about programming languages that are ignored when
we limit ourselves to mathematical or engineering methods. I think the programming language
community is, perhaps unconsciously, aware of this - one of the reviews of &lt;a href="http://tomasp.net/academic/papers/fsharp-data/"&gt;my recent PLDI
paper&lt;/a&gt; said &lt;em&gt;"this is a nice, novel design paper,
and the community often wants more design papers in our conferences"&lt;/em&gt;. The problem is that we
we do not know how to write and evaluate work that follows design methodology.&lt;/p&gt;
&lt;p&gt;To better understand how design works, I recently read &lt;a href="http://amzn.to/2gVxn8W"&gt;The Philosophy of Design&lt;/a&gt;
by Glenn Parsons. The book perhaps did not answer many of my questions about design, but it did give
me a number of ideas about what design is, what questions it can explore and how those could be
relevant for the study of programming languages...&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Getting started with The Gamma just got easier</title>
      <guid>http://tomasp.net/blog/2017/thegamma-getting-started/</guid>
      <link>http://tomasp.net/blog/2017/thegamma-getting-started/</link>
      <pubDate>Wed, 14 Jun 2017 12:27:17 GMT</pubDate>
      <description>&lt;p&gt;Over the last year, I have been working on &lt;a href="http://thegamma.net/"&gt;The Gamma project&lt;/a&gt;, which aims
to make data-driven visualizations more trustworthy and to enable large number of people to
build visualizations backed by data. The Gamma makes it possible to create visualizations that
are built on trustworthy primary data sources such as the &lt;a href="http://data.worldbank.org"&gt;World Bank&lt;/a&gt;
and you can provide your own &lt;a href="http://thegamma.net/publishing/"&gt;data source by writing a REST service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A great piece of feedback that I got when talking about The Gamma is that this is a nice ultimate
goal, but it makes it hard for people to start with The Gamma. If you do not want to use the World
Bank data and you're not a developer to write your own REST service, how do you get started?&lt;/p&gt;
&lt;a href="https://gallery.thegamma.net/create"&gt;
&lt;img src="http://tomasp.net/blog/2017/thegamma-getting-started/gallery.png" style="margin:10px 10% 20px 10%; width:80%"/&gt;
&lt;/a&gt;
&lt;p&gt;To make starting with The Gamma easier, the gallery now has a &lt;a href="https://gallery.thegamma.net/create"&gt;new four-step getting started page&lt;/a&gt;
where you can upload your data as a CSV file or paste it from Excel spreadsheet and create nice
visualizations that let your reader explore other aspects of the data.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gallery.thegamma.net/create"&gt;Head over to The Gamma Gallery to check it out&lt;/a&gt; or continue
reading to learn more about creating your first The Gamma visualization...&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Papers we Scrutinize: How to critically read papers</title>
      <guid>http://tomasp.net/blog/2017/papers-we-scrutinize/</guid>
      <link>http://tomasp.net/blog/2017/papers-we-scrutinize/</link>
      <pubDate>Wed, 12 Apr 2017 13:05:48 GMT</pubDate>
      <description>&lt;p&gt;As someone who enjoys being at the intersection of the academic world and the world of
industry, I'm very happy to see any attempts at bridging this harmful gap. For this reason,
it is great to see that &lt;a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html"&gt;more people are interested in reading academic
papers&lt;/a&gt; and that initiatives
like &lt;a href="http://paperswelove.org/"&gt;Papers We Love&lt;/a&gt; are there to help.&lt;/p&gt;
&lt;a href="http://paperswelove.org/"&gt;&lt;img src="http://tomasp.net/blog/2017/papers-we-scrutinize/pwl.png" class="rdecor" style="width:300px;"/&gt;&lt;/a&gt;
&lt;p&gt;There is one caveat with academic papers though. It is very easy to see academic papers
as containing eternal and unquestionable truths, rather than as something that the reader
should actively interact with. I &lt;a href="https://twitter.com/tomaspetricek/status/814600193643577344"&gt;recently remarked&lt;/a&gt;
about this saying that "reading papers" is too passive. I also mentioned one way of doing more
than just "reading", which is to write "critical reviews" – something that we recently tried
to do at the &lt;a href="http://2017.programmingconference.org/track/refuses-2017"&gt;Salon des Refusés&lt;/a&gt; workshop.
In this post, I would like to expand my remark.&lt;/p&gt;
&lt;p&gt;First of all, it is very easy to miss the context in which papers are written. The life of an academic
paper is not complete after it is published. Instead, it continues living its own life – people refer to it
in various contexts, give different meanings to entities that appear in the paper and may "love"
different parts of the paper than the author. This also means that there are different ways of
reading papers. You can try to reconstruct the original historical context, read it according to
the current main-stream interpretation or see it as an inspiration for your own ideas.&lt;/p&gt;
&lt;p&gt;I suspect that many people, both in academia and outside, read papers without worrying about
&lt;em&gt;how&lt;/em&gt; they are reading them. You can certainly "do science" or "read papers" without reflecting
on the process. That said, I think the philosophical reflection is important if we do not want to
get stuck in local maxima.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The mythology of programming language ideas</title>
      <guid>http://tomasp.net/blog/2017/programming-mythology/</guid>
      <link>http://tomasp.net/blog/2017/programming-mythology/</link>
      <pubDate>Tue, 07 Mar 2017 15:31:34 GMT</pubDate>
      <description>&lt;p&gt;If you read a about the history of science, you will no doubt be astonished by some of the
amazing theories that people used to believe. I recently finished reading &lt;a href="http://amzn.to/2mPjXtW"&gt;The Invention of Science
by David Wootton&lt;/a&gt;, which documents many of them (and is well worth reading,
not just because of this!) For example, did you know that if you put garlic on a magnet, the magnet
will stop working? Fortunately, you can recover the magnet by smearing goats blood on it. &lt;a href="https://en.wikipedia.org/wiki/Giambattista_della_Porta"&gt;Giambattista
della Porta&lt;/a&gt; tested this and concluded that it
was false, but &lt;a href="https://en.wikipedia.org/wiki/Alexander_Ross_(writer)"&gt;Alexander Ross&lt;/a&gt; argued that
our garlic is perhaps not so vigorous as those of ancient Greeks.&lt;/p&gt;
&lt;div style="text-align:center"&gt;&lt;a href="http://tomasp.net/blog/2017/programming-mythology/heliocentric.jpg"&gt;
  &lt;img src="http://tomasp.net/blog/2017/programming-mythology/heliocentric.jpg" class="rdecor"
    style="width:60%;max-width:400px;margin-left:30px;margin-top:0px;margin-bottom:20px" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;You can just laugh at these stories, but they can serve as interesting lessons for any scientist.
The lesson, however, is not the obvious one. Academics will &lt;a href="http://danghica.blogspot.co.uk/2016/09/what-else-are-we-getting-wrong.html"&gt;sometimes read those
stories&lt;/a&gt; and use them
to argue against something they do not consider scientific - arguing that it is like believing
that garlic break magnets.&lt;/p&gt;
&lt;p&gt;This is not how the analogy works. What is amazing about the old stories is that the conclusions
that now seem funny often had very solid reasoning behind them. If you believed in the basic
assumption of the time, then you could reach the same conclusions by following fairly sound
reasoning principles. In other words, the amazing theories were scientific and entirely reasonable.
The lesson is that what seems a completely reasonable idea now, may turn out to be wrong and quite
hilarious in retrospect.&lt;/p&gt;
&lt;p&gt;In this article, I will look at a couple of amazing theories that people believed in the past
and I will explain why they were reasonable given the way of thinking of the time.
Along the way, I will explore some of the ways of thinking that we use today about
programming and computer science and why they might appear silly in the future.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Towards open and transparent data-driven storytelling: Notes from my Alan Turing Institute talk</title>
      <guid>http://tomasp.net/blog/2017/thegamma-talk/</guid>
      <link>http://tomasp.net/blog/2017/thegamma-talk/</link>
      <pubDate>Thu, 02 Mar 2017 11:53:51 GMT</pubDate>
      <description>&lt;p&gt;As mentioned in &lt;a href="http://tomasp.net/blog/2016/thegamma-dni/"&gt;an earlier blog post&lt;/a&gt;, I've been
spending some time at the &lt;a href="http://turing.ac.uk/"&gt;Alan Turing Institute&lt;/a&gt; recently working on &lt;a href="http://thegamma.net"&gt;The Gamma
project&lt;/a&gt;. The goal is to make data visualizations on the web more transparent.
When you see a visualization online, you should be able to see where the data comes from, how it has been
transformed and check that it is not misleading, but you should also be able to modify it and
visualize other aspects of the data that interest you.&lt;/p&gt;
&lt;p&gt;I gave a talk about my work as part of a &lt;a href="https://www.youtube.com/channel/UCcr5vuAH5TPlYox-QLj4ySw/videos"&gt;talk series at The Alan Turing Institute&lt;/a&gt;, which has
been recorded and is &lt;a href="https://www.youtube.com/watch?v=aHjgpmzFjOA"&gt;now available on YouTube&lt;/a&gt;. If you prefer to watch talks, this is a good
45 minute overview of what I've been working on with great video quality (the video switches from
camera view to screen capture for demos!)&lt;/p&gt;
&lt;div style="text-align:center;margin-bottom:20px"&gt;
&lt;a href="https://www.youtube.com/watch?v=aHjgpmzFjOA"&gt;
&lt;img src="http://tomasp.net/blog/2017/thegamma-talk/talk.jpg" style="max-width:80%"/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;If you prefer text or do not have 45 minutes to watch the talk (right now), I wrote a short
summary that highlights the most important ideas from the talk. You can also check out the
&lt;a href="http://tpetricek.github.io/Talks/2016/open-storytelling/"&gt;talk slides&lt;/a&gt;, although I'll include
the most important ones here.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The Gamma dataviz package now available!</title>
      <guid>http://tomasp.net/blog/2017/thegamma-package/</guid>
      <link>http://tomasp.net/blog/2017/thegamma-package/</link>
      <pubDate>Wed, 25 Jan 2017 12:31:14 GMT</pubDate>
      <description>&lt;p&gt;There were a lot of rumors recently about &lt;a href="http://www.bbc.co.uk/news/uk-37995600"&gt;the death of facts&lt;/a&gt;
and even &lt;a href="https://www.theguardian.com/politics/2017/jan/19/crisis-of-statistics-big-data-democracy"&gt;the death of statistics&lt;/a&gt;.
I believe the core of the problem is that working with facts is quite tedious and the results are
often not particularly exciting. Social media made it extremely easy to share your own opinions
in an engaging way, but what we are missing is a similarly easy and engaging way to share facts
backed by data.&lt;/p&gt;
&lt;a href="https://www.npmjs.com/package/thegamma-script"&gt;
&lt;img src="http://tomasp.net/blog/2017/thegamma-package/npm.png" style="width:200px" class="rdecor-sm"/&gt;
&lt;/a&gt;
&lt;p&gt;This is, in essence, the motivation for The Gamma project that I've been &lt;a href="http://tomasp.net/blog/2016/thegamma-dni/"&gt;working on
recently&lt;/a&gt;. After several experiments, including the
&lt;a href="http://tomasp.net/blog/2016/thegamma-olympic-medalists/"&gt;visualization of Olympic medalists&lt;/a&gt;,
I'm now happy to share the first reusable component based on the work that you can try and use
in your data visualization projects. If you want to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/thegamma-script"&gt;Check out thegamma-script package on npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thegamma-sample-web.azurewebsites.net/"&gt;Minimal example of thegamma-script in action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thegamma.net/developers/"&gt;How to use thegamma-script in your projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The package implements a simple scripting language that anyone can use for writing simple data
aggregation and data exploration scripts. The tooling for the scripting language makes it super
easy to create and modify existing data analyses. Editor auto-complete offers all available
operations and a spreadsheet-inspired editor lets you create scripts without writing code - yet,
you still get a transparent and reproducible script as the result.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Thinking the unthinkable: What we cannot think in programming</title>
      <guid>http://tomasp.net/blog/2016/thinking-unthinkable/</guid>
      <link>http://tomasp.net/blog/2016/thinking-unthinkable/</link>
      <pubDate>Tue, 11 Oct 2016 16:30:37 GMT</pubDate>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;i class="fa fa-file-pdf-o" style="font-size:110%;margin:0px 5px 0px 0px"&gt;&lt;/i&gt;
This blog post is an edited and more accessible version of an article &lt;a href="http://tomasp.net/academic/drafts/unthinkable/"&gt;Thinking the
unthinkable&lt;/a&gt; that I recently presented at the PPIG 2016
conference. The &lt;a href="http://tomasp.net/academic/drafts/unthinkable/unthinkable-ppig.pdf"&gt;original article&lt;/a&gt;
(PDF) has proper references and more details; the &lt;a href="http://tpetricek.github.io/Talks/2016/unthinkable/ppig/"&gt;minimalistic talk
slides&lt;/a&gt; give a quick summary of the article.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;i class="fa fa-hand-o-right" style="font-size:110%;margin:0px 5px 0px 0px"&gt;&lt;/i&gt;
If you find this interesting, you might also be interested in a &lt;a href="https://github.com/tpetricek/anarchy-workshop/blob/master/proposal.md"&gt;workshop we are
planning&lt;/a&gt;. To keep in
touch leave a &lt;a href="https://github.com/tpetricek/anarchy-workshop/issues/3"&gt;comment on GitHub&lt;/a&gt;, ping me
at &lt;a href="http://twitter.com/tomaspetricek"&gt;@tomaspetricek&lt;/a&gt; or email &lt;a href="mailto:tomas@tomasp.net"&gt;tomas@tomasp.net&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="rdecor"&gt;
&lt;img src="http://tomasp.net/blog/2016/thinking-unthinkable/bufo.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Our thinking is shaped by basic assumptions that we rarely question. These assumptions exist at
different scales. Foucault's &lt;em&gt;episteme&lt;/em&gt; describes basic assumptions of an epoch (such as Renaissance);
Kuhn's &lt;em&gt;research paradigms&lt;/em&gt; determine how scientists of a given discipline approach problems and
Lakatos' &lt;em&gt;research programmes&lt;/em&gt; provide undisputable assumptions followed by a group of scientists.&lt;/p&gt;
&lt;p&gt;In this article, I try to discover some of the hidden assumptions in the area of programming
language research. What are assumptions that we never question and that determine how programming
languages are designed? And what might the world look like if we based our design method on
different basic principles?&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Can programming be liberated from function abstraction?</title>
      <guid>http://tomasp.net/blog/2016/no-functions/</guid>
      <link>http://tomasp.net/blog/2016/no-functions/</link>
      <pubDate>Tue, 27 Sep 2016 15:53:32 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2016/no-functions/lambda.png" style="width:180px" class="rdecor" /&gt;
&lt;p&gt;When you start working in the programming language theory business, you'll soon find out that
lambda abstraction and functions break many nice ideas or, at least, make your life very hard.
For example, type inference is easy if you only have &lt;code&gt;var x = ...&lt;/code&gt;, but it gets hard once you
want to infer type of &lt;code&gt;x&lt;/code&gt; in something like &lt;code&gt;fun x -&amp;gt; ...&lt;/code&gt; because we do not know what is
assigned to &lt;code&gt;x&lt;/code&gt;. Distributed programming is another example - sending around data is easy, but
once you start sending around function values, things become hard.&lt;/p&gt;
&lt;p&gt;Every programming language researcher soon learns this trick. When someone tells you about a nice
idea, you reply &lt;em&gt;"Interesting... but how does this interact with lambda abstraction?"&lt;/em&gt; and the
other person replies &lt;em&gt;"Whoa, hmm, let me think more about this."&lt;/em&gt; Then they go back and either give up,
because it does not work, or produce something that works, in theory, well with lambda abstraction,
but is otherwise quite unusable.&lt;/p&gt;
&lt;p&gt;When working on &lt;a href="http://tomasp.net/blog/2016/thegamma-olympic-medalists"&gt;The Gamma project&lt;/a&gt; and the
little &lt;a href="github.com/the-gamma/thegamma-script"&gt;scripting language it runs&lt;/a&gt;, I recently went through
a similar thinking process. Instead of letting lambda abstraction spoil the party &lt;em&gt;again&lt;/em&gt;,
I think we need to think about different ways of code reuse.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The Gamma — Visualizing Olympic Medalists</title>
      <guid>http://tomasp.net/blog/2016/thegamma-olympic-medalists/</guid>
      <link>http://tomasp.net/blog/2016/thegamma-olympic-medalists/</link>
      <pubDate>Tue, 06 Sep 2016 15:37:01 GMT</pubDate>
      <description>&lt;p&gt;Olympic Games are perfect opportunity to do a fun data visualization project - just like
&lt;a href="http://tomasp.net/blog/2015/happy-new-year-tweets/"&gt;New Year&lt;/a&gt;, you can easily predict when they
will happen and you can get something interesting ready in advance. I used this year's
Games in Rio as a motivation to resume working on &lt;a href="http://tomasp.net/blog/2016/thegamma-dni/"&gt;The Gamma
project&lt;/a&gt;. If you did not read my &lt;a href="http://localhost:11112/blog/2016/thegamma-dni/"&gt;previous
article&lt;/a&gt;,
the idea is to build tooling for open, reproducible and interactive data-driven storytelling.
When you see a visualization, not only you should be able to see how it has been created
(what data it uses &amp;amp; how), but you should also be able to modify it, without much programming
experience, and look at other interesting aspects of the data.&lt;/p&gt;
&lt;p&gt;The first version of The Gamma project tries to do some of this, using historical and current
data on Olympic medals as a sample dataset. You can play with the project at &lt;a href="http://rio2016.thegamma.net/"&gt;The Gamma web
site&lt;/a&gt;:&lt;/p&gt;
&lt;div class="wdecor"&gt;
&lt;a href="http://rio2016.thegamma.net"&gt;
&lt;img src="http://tomasp.net/blog/2016/thegamma-olympic-medalists/banner-wide.jpg" style="max-width:90%;margin:0px 5% 0px 5%" /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Without further ado, here are the most important links if you want to explore how it all works
on your own. However, continue reading and I'll describe the most important parts!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/the-gamma/thegamma-script"&gt;TheGamma Script &lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;/a&gt;
contains implementation of most of the client-side code. In particular, this includes compiler
for the language that is used to write the visualizations. It is written using &lt;a href="http://fsharp.org"&gt;F#&lt;/a&gt;
and &lt;a href="https://fable-compiler.github.io/"&gt;Fable&lt;/a&gt; and generates JavaScript using
&lt;a href="http://babeljs.io/"&gt;Babel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/the-gamma/thegamma-olympics-web"&gt;TheGamma Olympics Web &lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;/a&gt;
is a minimal web site that hosts the visualizations. You can find all the source code for
individual visualizations in &lt;a href="https://github.com/the-gamma/thegamma-olympics-web/tree/master/docs"&gt;the docs folder&lt;/a&gt;.
For example, see &lt;a href="https://github.com/the-gamma/thegamma-olympics-web/blob/master/docs/medals-per-athlete.md"&gt;medals per athlete&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/the-gamma/thegamma-script"&gt;TheGamma Services &lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;/a&gt;
implements a server-side component that provides data for the client. This serves the
&lt;a href="https://github.com/the-gamma/thegamma-services/blob/master/data/medals-expanded.csv"&gt;cleaned CSV data set&lt;/a&gt;
using the &lt;a href="https://fsprojects.github.io/RestProvider/"&gt;REST Provider Protocol&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project is still in early stages and the code needs more documentation (and ReadMe files, I
know!) However, if you would be interested in using it for something or you have some interesting
data to visualize, do not hesitate to ping me at &lt;a href="http://twitter.com/tomaspetricek"&gt;@tomaspetricek&lt;/a&gt;.
Also, thanks to the &lt;a href="https://www.digitalnewsinitiative.com/fund/"&gt;DNI Innovation Fund&lt;/a&gt; for funding
the project and to the &lt;a href="https://turing.ac.uk/"&gt;Alan Turing Institute&lt;/a&gt; for providing a place to work
on this over the coming months!&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The Gamma and Digital News Innovation Fund</title>
      <guid>http://tomasp.net/blog/2016/thegamma-dni/</guid>
      <link>http://tomasp.net/blog/2016/thegamma-dni/</link>
      <pubDate>Wed, 31 Aug 2016 12:38:26 GMT</pubDate>
      <description>&lt;p&gt;Last year, I wrote a bit about my interest in &lt;a href="http://tomasp.net/blog/2015/thegamma/"&gt;building programming tools for data
journalism&lt;/a&gt;. Data journalism might sound like a niche
field, but that is not the case if we talk about data-driven storytelling more generally,&lt;/p&gt;
&lt;a href="https://www.digitalnewsinitiative.com/"&gt;
&lt;img src="http://tomasp.net/blog/2016/thegamma-dni/dni-logo.png" style="width:400px" class="rdecor"/&gt;
&lt;/a&gt;
&lt;p&gt;In programming, your outcome is typically some application that does stuff. In data science,
your outcome is very often a report or a &lt;em&gt;story&lt;/em&gt; that aims to influence people's behavior or
company decisions. No matter whether you are a journalist writing an article about government
spending or an analyst producing internal sales reports, you are &lt;em&gt;telling stories with data&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Being able to tell stories with data (but also verify and assess other people's stories that
can be backed by data) is becoming a vital skill in the modern world, which is partly why I find
this topic extremely important and interesting. But to do this currently, you need to be a
skilled programmer, great designer and good storyteller, all at the same time!&lt;/p&gt;
&lt;p&gt;I have not written about this topic much over the last year (mainly because I was busy
with &lt;a href="http://tomasp.net/coeffects"&gt;Coeffects&lt;/a&gt;, &lt;a href="http://www.fsharpconf.com"&gt;fsharpConf&lt;/a&gt;,
&lt;a href="http://fslab.org"&gt;FsLab&lt;/a&gt; and &lt;a href="http://www.fsharpworks.com"&gt;fsharpWorks&lt;/a&gt;), but this will be
changing - I'm very happy to announce that my data-journalism related project
&lt;a href="http://thegamma.net"&gt;The Gamma&lt;/a&gt; has been awarded funding from the &lt;a href="https://www.digitalnewsinitiative.com/fund/"&gt;DNI Innovation
Fund&lt;/a&gt; and I'll be working on it over the next year
at the &lt;a href="https://turing.ac.uk/"&gt;Alan Turing Institute&lt;/a&gt; in London.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Better F# data science with FsLab and Ionide</title>
      <guid>http://tomasp.net/blog/2016/fslab-ionide/</guid>
      <link>http://tomasp.net/blog/2016/fslab-ionide/</link>
      <pubDate>Wed, 06 Jul 2016 15:03:23 GMT</pubDate>
      <description>&lt;p&gt;At &lt;a href="http://ndcoslo.com/"&gt;NDC Oslo 2016&lt;/a&gt;, I did a talk about some of the recent new F# projects
that are making data science with F# even nicer than it used to be. The talk covered a wider range
of topics, but one of the nice new thing I showed was the improved F# Interactive in the &lt;a href="http://www.ionide.io/"&gt;Ionide
plugin for Atom&lt;/a&gt; and the integration with FsLab libraries that it provides.&lt;/p&gt;
&lt;p&gt;In particular, with the latest version of &lt;a href="http://ionide.io"&gt;Ionide&lt;/a&gt; for &lt;a href="http://atom.io"&gt;Atom&lt;/a&gt;
and the latest version of &lt;a href="http://www.fslab.org"&gt;FsLab package&lt;/a&gt;, you can run code in F# Interactive
and you'll see resulting time series, data frames, matrices, vectors and charts as nicely pretty
printed HTML objects, right in the editor. The following shows some of the features (click on it
for a bigger version):&lt;/p&gt;
&lt;a href="http://tomasp.net/blog/2016/fslab-ionide/prices.png"&gt;
&lt;img src="http://tomasp.net/blog/2016/fslab-ionide/prices.png" style="margin:15px 2% 25px 2%;width:96%" /&gt;
&lt;/a&gt;
&lt;p&gt;In this post, I'll write about how the new Ionide and FsLab integration works, how you can use
it with your own libraries and also about some of the future plans. You can also learn more by
getting the FsLab package, or watching the NDC talk..&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Upcoming F# events - learn Suave, FsLab &amp;amp; more!</title>
      <guid>http://tomasp.net/blog/2016/fsharp-events/</guid>
      <link>http://tomasp.net/blog/2016/fsharp-events/</link>
      <pubDate>Tue, 31 May 2016 00:51:50 GMT</pubDate>
      <description>&lt;p&gt;Some people in the F# community have reputation for traveling too much. I do not know how that is
possible, but as it happens, I will be visiting a couple of places in June and doing a number of
talks, workshops and courses. So, if you are thinking about getting into F#, web development with
F# using the &lt;a href="http://suave.io"&gt;amazing Suave library&lt;/a&gt;, playing with the new trendy F# to JavaScript
compiler &lt;a href="http://fsprojects.github.io/Fable"&gt;called Fable&lt;/a&gt;, or learning about the recent
features in &lt;a href="https://twitter.com/fslaborg/status/728397249697488896"&gt;FsLab and Ionide&lt;/a&gt;, then
continue reading!&lt;/p&gt;
&lt;img src="http://tomasp.net/blog/2016/fsharp-events/map.png" style="margin:0px 5% 20px 5%; width:90%" /&gt;
&lt;p&gt;The map includes all my travels, but not all of the pins are for F# events. I'm visiting Prague
just to see my family (even though there is a &lt;a href="http://www.fsharping.cz"&gt;new awesome F# meetup there&lt;/a&gt;)
and my stop in Paris is attending &lt;a href="http://www.hapoc.org/hapop3"&gt;Symposium for the History and Philosophy of
Programming&lt;/a&gt; (although we might still do something with the local F#
group too).&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Philosophical questions about programming</title>
      <guid>http://tomasp.net/blog/2016/philopl-questions/</guid>
      <link>http://tomasp.net/blog/2016/philopl-questions/</link>
      <pubDate>Thu, 26 May 2016 12:33:26 GMT</pubDate>
      <description>&lt;p&gt;Combining philosophy and computer science might appear a bit odd. The disciplines have very little
overlap. Both philosophers and computer scientists get taught formal logic at some point in their
undergraduate courses, but that's probably as close as they get.&lt;/p&gt;
&lt;p&gt;But the fact that the disciplines do not overlap much might very well be the reason why putting them
together is interesting. In an article about &lt;a href="http://jods.mitpress.mit.edu/pub/designandscience"&gt;Design and Science&lt;/a&gt;,
Joichi Ito (from MIT Media Lab), describes the term &lt;em&gt;antidisciplinary&lt;/em&gt; and nicely
summarizes why looking at such unusual combinations is worthwhile:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interdisciplinary work is when people from different disciplines work together. But
&lt;em&gt;antidisciplinary&lt;/em&gt; is something very different; it's about working in spaces that
simply do not fit into any existing academic discipline.&lt;/p&gt;
&lt;p&gt;[When focusing on disciplines, it] takes more and more effort and resources to make a
unique contribution. While the space between and beyond the disciplines can be academically
risky, it (...) requires fewer resources to try promising, unorthodox
approaches; and provides the potential to have tremendous impact (...).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see from some of my &lt;a href="http://tomasp.net/blog/tag/philosophy/"&gt;earlier blog posts&lt;/a&gt;,
I think the space between philosophy and computer science is an interesting area. In this article,
I'll explain why. Unlike some of the previous posts (about &lt;a href="http://tomasp.net/blog/2015/failures/index.html"&gt;miscomputation&lt;/a&gt;,
&lt;a href="http://tomasp.net/blog/2015/against-types/index.html"&gt;types&lt;/a&gt; and &lt;a href="http://tomasp.net/blog/2014/philosophy-pl/index.html"&gt;philosophy of
science&lt;/a&gt;), this post is quite broad and
does not go into much detail.&lt;/p&gt;
&lt;p&gt;At the danger of sounding like a collection of random rants, I look at a number of
questions that arise when you look at computer science from the philosophical perspective,
but I won't attempt to answer them. You can see this article as a research proposal too -
and I hope to write more about some of the questions in the future.
I wish antidisciplinary work was more common and I believe looking
into such questions could have the tremendous impact that Joichi Ito mentioned.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Coeffects playground: Interactive essay based on my PhD thesis</title>
      <guid>http://tomasp.net/blog/2016/coeffects-playground/</guid>
      <link>http://tomasp.net/blog/2016/coeffects-playground/</link>
      <pubDate>Tue, 12 Apr 2016 14:33:52 GMT</pubDate>
      <description>&lt;p&gt;In my &lt;a href="http://tomasp.net/academic/theses/coeffects/"&gt;PhD thesis&lt;/a&gt;, I worked on integrating
&lt;em&gt;contextual information&lt;/em&gt; into a type system of functional programming languages. For example,
say your mobile application accesses something from the environment such as GPS sensor or your
Facebook friends. With &lt;em&gt;coeffects&lt;/em&gt;, this could be a part of the type. Rather than having type
&lt;code&gt;string -&amp;gt; Person&lt;/code&gt;, the type of a function would also include resources and would be
&lt;code&gt;string -{ gps, fb }-&amp;gt; Person&lt;/code&gt;. I wrote &lt;a href="http://tomasp.net/blog/2014/why-coeffects-matter/"&gt;longer introduction to coeffects&lt;/a&gt; on this
blog before.&lt;/p&gt;
&lt;p&gt;As one might expect, the PhD thesis is more theoretical and it looks at other kinds of contextual
information (e.g. past values in stream-based data-flow programming) and it identifies abstract
&lt;em&gt;coeffect algebra&lt;/em&gt; that captures the essence of contextual information that can be nicely tracked
in a functional language.&lt;/p&gt;
&lt;p&gt;I always thought that the most interesting thing about the thesis is that it gives people a nice way
to think about &lt;em&gt;context&lt;/em&gt; in a unified way. Sadly, the very theoretical presentation in the thesis
makes this quite hard for those who are not doing programming language theory.&lt;/p&gt;
&lt;p&gt;To make it a bit easier to explore the ideas behind coeffects, I wrote a coeffect playground
that runs in a web browser and lets you learn about coeffects, play with two example context-aware languages,
run a couple of demos and learn more about how the theory works. Go &lt;a href="http://tomasp.net/coeffects/"&gt;check it out now&lt;/a&gt;
or continue below to learn more about some interesting internals!&lt;/p&gt;
&lt;a href="http://tomasp.net/coeffects/"&gt;
&lt;img src="http://tomasp.net/blog/2016/coeffects-playground/screenshot.png" style="width:90%; margin:0px 5% 10px 5%" /&gt;
&lt;/a&gt;


</description>
    </item>
    <item>
      <title>Happy New Year 2016 around the World: Behind the scenes of my #FsAdvent project</title>
      <guid>http://tomasp.net/blog/2015/happy-new-year-tweets/</guid>
      <link>http://tomasp.net/blog/2015/happy-new-year-tweets/</link>
      <pubDate>Wed, 30 Dec 2015 18:09:34 GMT</pubDate>
      <description>&lt;p&gt;Just like &lt;a href="http://tomasp.net/blog/2014/composing-christmas/"&gt;last year&lt;/a&gt; and the
&lt;a href="http://tomasp.net/blog/2013/japan-advent-art/index.html"&gt;year&lt;/a&gt;
&lt;a href="http://tomasp.net/blog/2014/japan-advent-art-en/"&gt;before&lt;/a&gt;, I wanted to participate in the
&lt;a href="https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/"&gt;#FsAdvent&lt;/a&gt;
event, where someone writes a blog post about something they did with F# during December.
Thanks to &lt;a href="https://sergeytihon.wordpress.com/"&gt;Sergey Tihon&lt;/a&gt; for the organization of the English
version and the &lt;a href="http://connpass.com/event/22056/"&gt;Japanese F# community&lt;/a&gt; for coming up with the
idea a few years ago!&lt;/p&gt;
&lt;p&gt;As my blog post ended up on 31 December, I wanted to do something that would fit well with the
theme of ending of 2015 and starting of the new year 2016 and so I decided to write a little
interactive web site that tracks the "Happy New Year" tweets live across the globe. This is
partly inspired by &lt;a href="http://twitter.github.io/interactive/newyear2014/"&gt;Happy New Year Tweets&lt;/a&gt;
from Twitter in 2014, but rather than analyzing data in retrospect, you can watch 2016 come live!&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Philosophy of science books every computer scientist should read</title>
      <guid>http://tomasp.net/blog/2015/reading-list/</guid>
      <link>http://tomasp.net/blog/2015/reading-list/</link>
      <pubDate>Thu, 10 Dec 2015 12:42:25 GMT</pubDate>
      <description>&lt;p&gt;When I tell my fellow computer scientists or software developers that I'm interested in
&lt;em&gt;philosophy of science&lt;/em&gt;, they first look a bit confused, then we have a really interesting
discussion about it and then they ask me for some interesting books they could read about it.
Given that Christmas is just around the corner and some of the readers might still be looking
for a good present to get, I thought that now is the perfect time to turn my answer into a
blog post!&lt;/p&gt;
&lt;p&gt;So, what is philosophy of science about? In summary, it is about trying to better understand
science. I'll keep using the word &lt;em&gt;science&lt;/em&gt; here, but I think &lt;em&gt;engineering&lt;/em&gt; would work equally
well. As someone who recently spent a couple of years doing a PhD on programming language theory,
I find this extremely important for computer science (and programming). How can we make better
programming languages if we do not know what &lt;em&gt;better&lt;/em&gt; means? And what do we mean when we talk
about very basic concepts like &lt;em&gt;types&lt;/em&gt; or programming &lt;em&gt;errors&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Reading about philosophy of science inspired me to write a couple of essays on some of the
topics above including &lt;a href="/blog/2014/philosophy-pl/"&gt;What can programming language research learn from the philosophy of science?&lt;/a&gt; and two essays that discuss the &lt;a href="/blog/2015/against-types/"&gt;nature of types in programming languages&lt;/a&gt; and also
the nature of &lt;a href="/blog/2015/failures/"&gt;errors and miscomputations&lt;/a&gt;. This blog post lists some of
the interesting books that I've read and that influenced my thinking (not just) when writing the
aforementioned essays.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>F# + ML |&amp;gt; MVP Summit: Talk recordings, slides and source code</title>
      <guid>http://tomasp.net/blog/2015/fsharp-ml-mvp/</guid>
      <link>http://tomasp.net/blog/2015/fsharp-ml-mvp/</link>
      <pubDate>Wed, 18 Nov 2015 02:03:44 GMT</pubDate>
      <description>&lt;a href="http://www.functional-programming.net"&gt;
&lt;img src="http://tomasp.net/blog/2015/fsharp-ml-mvp/fsml.png" style="width:200px;float:right;margin:0px 0px 15px 15px" /&gt;
&lt;/a&gt;
&lt;p&gt;I was fortunate enough to make it to the Microsoft MVP summit this year. I didn't learn anything
secret (and even if I did, I wouldn't tell you!) but one thing I did learn is that there is a lot
of interest in data science and machine learning both inside Microsoft and in the MVP community.
What was less expected and more exciting was that there was also a lot of interest in F#, which
is a perfect fit for both of these topics!&lt;/p&gt;
&lt;p&gt;When I visited Microsoft back in May to talk about &lt;a href="http://tpetricek.github.io/Talks/2015/scalable-ml-ds-fsharp/redmond/"&gt;Scalable Machine Learning and Data Science
with F#&lt;/a&gt; at an internal event,
I ended up chatting with the organizer about F# and we agreed that it would be nice to do more
on F#, which is how we ended up organizing the &lt;a href="http://fsharpworks.com/mvp-summit/2015.html"&gt;F# + ML |&amp;gt; MVP Summit 2015&lt;/a&gt;
mini-conference on the Friday after the summit.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>The Gamma: Simple code behind interactive articles</title>
      <guid>http://tomasp.net/blog/2015/thegamma/</guid>
      <link>http://tomasp.net/blog/2015/thegamma/</link>
      <pubDate>Mon, 28 Sep 2015 16:07:08 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/thegamma/dj.png" style="float:right;width:300px"
  title="Illustration from 'The Data Journalism Handbook'" /&gt;
&lt;p&gt;There are huge amounts of data around us that we could use to better understand the world.
Every company collects large amounts of data about their sales or customers. Governments and
international organizations increasingly release interesting data sets to the public through
various &lt;em&gt;open government data&lt;/em&gt; initiatives (&lt;a href="http://data.gov"&gt;data.gov&lt;/a&gt; or
&lt;a href="http://data.gov.uk"&gt;data.gov.uk&lt;/a&gt;). But raw data does not tell you much.&lt;/p&gt;
&lt;p&gt;An interesting recent development is &lt;em&gt;data journalism&lt;/em&gt;. Data journalists tell stories using
data. A data driven article is based on an interesting observation from the data, it includes
(interactive) visualizations that illustrate the point and it often allows the reader to get
the raw data.&lt;/p&gt;
&lt;p&gt;Adding a chart produced in, say, Excel to an article is easy, but building good interactive
visualization is much harder. Ideally, the data driven article should not be just text with
static pictures, but a &lt;em&gt;program&lt;/em&gt; that links the original data source to the visualization.
This lets readers explore how the data is used, update the content when new data is available
and change parameters of the visualization if they need to understand different aspect of the
topic.&lt;/p&gt;
&lt;p&gt;This is in short what I'm trying to build with &lt;a href="http://thegamma.net"&gt;The Gamma project&lt;/a&gt;. If
you're interested in building better reports or data driven articles, continue reading!&lt;/p&gt;
&lt;blockquote&gt;
&lt;img src="http://tomasp.net/blog/2015/thegamma/sl.png" style="float:right;width:150px" /&gt;
&lt;p&gt;I did a talk about The Gamma project at the fantastic &lt;a href="http://www.future-programming.org/programSL.html"&gt;Future Programming workshop&lt;/a&gt;
at the &lt;a href="http://www.thestrangeloop.com/"&gt;StrangeLoop conference&lt;/a&gt; last week (thanks for inviting me!)
and there is a &lt;a href="https://www.youtube.com/watch?v=cYoO2RvZn7Y&amp;amp;feature=youtu.be&amp;amp;a"&gt;recording of my 40 minute talk on YouTube&lt;/a&gt;,
so if you prefer to watch videos, check it out!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Are you a data journalist or data analyst? We're looking for early partners!
I joined the &lt;a href="http://www.joinef.com" title="Nothing to do with Entity Framework, don't worry!"&gt;EF
programme&lt;/a&gt; to work on this and if the project sounds like something you'd like to see happen,
&lt;a href="mailto:tomas@tomasp.net"&gt;please get in touch&lt;/a&gt; or share your contact details
on &lt;a href="http://thegamma.net"&gt;The Gamma page&lt;/a&gt;!&lt;/p&gt;


</description>
    </item>
  </channel>
</rss>